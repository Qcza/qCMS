{"version":3,"sources":["accordion/accordion.ts"],"names":[],"mappings":"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","file":"accordion/accordion.js","sourcesContent":["import {\n  Component,\n  Input,\n  QueryList,\n  ContentChildren,\n  Directive,\n  TemplateRef,\n  ContentChild,\n  Output,\n  EventEmitter,\n  AfterContentChecked\n} from '@angular/core';\nimport {isString} from '../util/util';\n\nlet nextId = 0;\n\n/**\n * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.\n */\n@Directive({selector: 'template[ngbPanelTitle]'})\nexport class NgbPanelTitle {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n\n/**\n * This directive must be used to wrap accordion panel content.\n */\n@Directive({selector: 'template[ngbPanelContent]'})\nexport class NgbPanelContent {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n\n/**\n * The NgbPanel directive represents an in individual panel with the title and collapsible\n * content\n */\n@Directive({selector: 'ngb-panel'})\nexport class NgbPanel {\n  /**\n   *  A flag determining whether the panel is disabled or not.\n   *  When disabled, the panel cannot be toggled.\n   */\n  @Input() disabled = false;\n\n  /**\n   *  An optional id for the panel. The id should be unique.\n   *  If not provided, it will be auto-generated.\n   */\n  @Input() id = `ngb-panel-${nextId++}`;\n\n  /**\n   *  The title for the panel.\n   */\n  @Input() title: string;\n\n  /**\n   *  Panel type (CSS class). Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n   */\n  @Input() type: string;\n\n  @ContentChild(NgbPanelContent) contentTpl: NgbPanelContent;\n  @ContentChild(NgbPanelTitle) titleTpl: NgbPanelTitle;\n}\n\n/**\n * The payload of the panel change event\n */\nexport interface NgbPanelChangeEvent {\n  panelId: string;\n  nextState: boolean;\n  preventDefault();\n}\n\n/**\n * The NgbAccordion directive is a collection of panels.\n * It can assure that only panel can be opened at a time.\n */\n@Component({\n  selector: 'ngb-accordion',\n  exportAs: 'ngbAccordion',\n  template: `\n  <div class=\"card\">\n    <template ngFor let-panel [ngForOf]=\"_panels\">\n      <div [class]=\"'card-header ' + (panel.type ? 'card-'+panel.type: type ? 'card-'+type : '')\" [class.active]=\"_isOpen(panel.id)\">\n        <a tabindex=\"0\" href (click)=\"!!toggle(panel.id)\" [class.text-muted]=\"panel.disabled\">\n          {{panel.title}}<template [ngTemplateOutlet]=\"panel.titleTpl?.templateRef\"></template>          \n        </a>\n      </div>\n      <div class=\"card-block\" *ngIf=\"_isOpen(panel.id)\">\n        <template [ngTemplateOutlet]=\"panel.contentTpl.templateRef\"></template>\n      </div>\n    </template>\n  </div>\n`\n})\nexport class NgbAccordion implements AfterContentChecked {\n  @ContentChildren(NgbPanel) _panels: QueryList<NgbPanel>;\n\n  /**\n   * An array or comma separated strings of panel identifiers that should be opened\n   */\n  @Input() activeIds: string | string[] = [];\n\n  /**\n   *  Whether the other panels should be closed when a panel is opened\n   */\n  @Input('closeOthers') closeOtherPanels = false;\n\n  /**\n   *  Type of accordion's panels. Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n   */\n  @Input() type: string;\n\n\n  /**\n   * A panel change event fired right before the panel toggle happens. The event object has three properties:\n   * 'panelId', the id of panel that id toggled, 'nextState' whether panel will be opened (true) or closed (false),\n   * and a function, 'preventDefault()' which, when executed, will prevent the panel toggle from occurring.\n   */\n  @Output() change = new EventEmitter<NgbPanelChangeEvent>();\n\n  /**\n   * A map that stores each panel state\n   */\n  private _states: Map<string, boolean> = new Map<string, boolean>();\n\n  /**\n   * A map that stores references to all panels\n   */\n  private _panelRefs: Map<string, NgbPanel> = new Map<string, NgbPanel>();\n\n  /**\n   * Programmatically toggle a panel with a given id.\n   */\n  toggle(panelId: string) {\n    const panel = this._panelRefs.get(panelId);\n\n    if (panel && !panel.disabled) {\n      const nextState = !this._states.get(panelId);\n      let defaultPrevented = false;\n\n      this.change.emit({panelId: panelId, nextState: nextState, preventDefault: () => { defaultPrevented = true; }});\n\n      if (!defaultPrevented) {\n        this._states.set(panelId, nextState);\n\n        if (this.closeOtherPanels) {\n          this._closeOthers(panelId);\n        }\n        this._updateActiveIds();\n      }\n    }\n  }\n\n  ngAfterContentChecked() {\n    // active id updates\n    if (isString(this.activeIds)) {\n      this.activeIds = (this.activeIds as string).split(/\\s*,\\s*/);\n    }\n    this._updateStates();\n\n    // closeOthers updates\n    if (this.activeIds.length > 1 && this.closeOtherPanels) {\n      this._closeOthers(this.activeIds[0]);\n      this._updateActiveIds();\n    }\n  }\n\n  private _closeOthers(panelId: string) {\n    this._states.forEach((state, id) => {\n      if (id !== panelId) {\n        this._states.set(id, false);\n      }\n    });\n  }\n\n  private _isOpen(panelId: string): boolean { return this._states.get(panelId); }\n\n  private _updateActiveIds() {\n    this.activeIds =\n        this._panels.toArray().filter(panel => this._isOpen(panel.id) && !panel.disabled).map(panel => panel.id);\n  }\n\n  private _updateStates() {\n    this._states.clear();\n    this._panelRefs.clear();\n    this._panels.toArray().forEach((panel) => {\n      this._states.set(panel.id, this.activeIds.indexOf(panel.id) > -1 && !panel.disabled);\n      this._panelRefs.set(panel.id, panel);\n    });\n  }\n}\n\nexport const NGB_ACCORDION_DIRECTIVES = [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent];\n"],"sourceRoot":"/source/"}