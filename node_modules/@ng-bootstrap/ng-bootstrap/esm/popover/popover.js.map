{"version":3,"sources":["popover/popover.ts"],"names":[],"mappings":"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","file":"popover/popover.js","sourcesContent":["import {\n  Component,\n  Directive,\n  Input,\n  ChangeDetectionStrategy,\n  OnInit,\n  AfterViewChecked,\n  OnDestroy,\n  Injector,\n  Renderer,\n  ComponentRef,\n  ElementRef,\n  TemplateRef,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n} from '@angular/core';\n\nimport {listenToTriggers} from '../util/triggers';\nimport {Positioning} from '../util/positioning';\nimport {PopupService} from '../util/popup';\n\n@Component({\n  selector: 'ngb-popover-window',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'[class]': '\"popover in popover-\" + placement', 'role': 'tooltip'},\n  template: `\n    <div class=\"popover-arrow\"></div>\n    <h3 class=\"popover-title\">{{title}}</h3><div class=\"popover-content\"><ng-content></ng-content></div>\n    `\n})\nexport class NgbPopoverWindow {\n  @Input() placement = 'top';\n  @Input() title: string;\n}\n\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\n@Directive({selector: '[ngbPopover]', exportAs: 'ngbPopover'})\nexport class NgbPopover implements OnInit, AfterViewChecked, OnDestroy {\n  /**\n   * Content to be displayed as popover.\n   */\n  @Input() ngbPopover: string | TemplateRef<any>;\n  /**\n   * Title of a popover.\n   */\n  @Input() title: string;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() placement = 'top';\n  /**\n   * Specifies events that should trigger. Supports a space separated list of event names.\n   */\n  @Input() triggers = 'click';\n\n  private _popupService: PopupService<NgbPopoverWindow>;\n  private _positioning = new Positioning();\n  private _windowRef: ComponentRef<NgbPopoverWindow>;\n  private _unregisterListenersFn;\n\n  constructor(\n      private _elementRef: ElementRef, private _renderer: Renderer, injector: Injector,\n      componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef) {\n    this._popupService = new PopupService<NgbPopoverWindow>(\n        NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);\n  }\n\n\n  /**\n   * Opens an element’s popover. This is considered a “manual” triggering of the popover.\n   */\n  open() {\n    if (!this._windowRef) {\n      this._windowRef = this._popupService.open(this.ngbPopover);\n      this._windowRef.instance.placement = this.placement;\n      this._windowRef.instance.title = this.title;\n    }\n  }\n\n  /**\n   * Closes an element’s popover. This is considered a “manual” triggering of the popover.\n   */\n  close(): void {\n    this._popupService.close();\n    this._windowRef = null;\n  }\n\n  /**\n   * Toggles an element’s popover. This is considered a “manual” triggering of the popover.\n   */\n  toggle(): void {\n    if (this._windowRef) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  ngOnInit() {\n    this._unregisterListenersFn = listenToTriggers(\n        this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this),\n        this.toggle.bind(this));\n  }\n\n  ngAfterViewChecked() {\n    if (this._windowRef) {\n      const targetPosition = this._positioning.positionElements(\n          this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement, false);\n\n      const targetStyle = this._windowRef.location.nativeElement.style;\n      targetStyle.top = `${targetPosition.top}px`;\n      targetStyle.left = `${targetPosition.left}px`;\n    }\n  }\n\n  ngOnDestroy() { this._unregisterListenersFn(); }\n}\n\nexport const NGB_POPOVER_DIRECTIVES = [NgbPopover, NgbPopoverWindow];\n"],"sourceRoot":"/source/"}