{"version":3,"sources":["typeahead/typeahead-window.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,WAAW,EAAC,MAAM,eAAe;OAC1E,EAAC,YAAY,EAAC,MAAM,aAAa;OAEjC,EAAC,QAAQ,EAAC,MAAM,cAAc;AA2BrC;IAAA;QACU,eAAU,GAAG,CAAC,CAAC;QAYvB;;;WAGG;QACM,cAAS,GAAG,QAAQ,CAAC;QAO9B;;WAEG;QACe,gBAAW,GAAG,IAAI,YAAY,EAAE,CAAC;IAWrD,CAAC;IATC,SAAS,KAAK,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAErD,UAAU,CAAC,UAAkB,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC;IAEhE,IAAI,KAAK,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAEzE,IAAI,KAAK,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAErG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC;AAhCC;IAAC,KAAK,EAAE;;mDAAA;AAKR;IAAC,KAAK,EAAE;;gDAAA;AAMR;IAAC,KAAK,EAAE;;qDAAA;AAKR;IAAC,KAAK,EAAE;;0DAAA;AAKR;IAAC,MAAM,CAAC,QAAQ,CAAC;;uDAAA;AA9CnB;IAAC,SAAS,CAAC;QACT,QAAQ,EAAE,sBAAsB;QAChC,QAAQ,EAAE,oBAAoB;QAC9B,IAAI,EAAE,EAAC,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,gBAAgB,EAAC;QAC3D,QAAQ,EAAE;;;;;;;;;;;;GAYT;QACD,UAAU,EAAE,CAAC,YAAY,CAAC;KAC3B,CAAC;;sBAAA;AAuCD","file":"typeahead/typeahead-window.js","sourcesContent":["import {Component, Input, Output, EventEmitter, TemplateRef} from '@angular/core';\nimport {NgbHighlight} from './highlight';\n\nimport {toString} from '../util/util';\n\nexport type ResultTplCtx = {\n  result: any,\n  term: string,\n  formatter: (_: string) => string\n};\n\n@Component({\n  selector: 'ngb-typeahead-window',\n  exportAs: 'ngbTypeaheadWindow',\n  host: {'class': 'dropdown-menu', 'style': 'display: block'},\n  template: `\n    <template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\n    </template>\n    <template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\n      <button class=\"dropdown-item\" [class.active]=\"idx === _activeIdx\" \n        (mouseenter)=\"markActive(idx)\" \n        (click)=\"select(result)\">\n          <template [ngTemplateOutlet]=\"resultTemplate || rt\" \n          [ngOutletContext]=\"{result: result, term: term, formatter: formatter}\"></template>\n      </button>\n    </template>\n  `,\n  directives: [NgbHighlight]\n})\nexport class NgbTypeaheadWindow {\n  private _activeIdx = 0;\n\n  /**\n   * Typeahead match results to be displayed\n   */\n  @Input() results;\n\n  /**\n   * Search term used to get current results\n   */\n  @Input() term: string;\n\n  /**\n   * A function used to format a given result before display. This function should return a formated string without any\n   * HTML markup.\n   */\n  @Input() formatter = toString;\n\n  /**\n   * A template to display a matching result.\n   */\n  @Input() resultTemplate: TemplateRef<ResultTplCtx>;\n\n  /**\n   * Event raised when users selects a particular result row.\n   */\n  @Output('select') selectEvent = new EventEmitter();\n\n  getActive() { return this.results[this._activeIdx]; }\n\n  markActive(_activeIdx: number) { this._activeIdx = _activeIdx; }\n\n  next() { this._activeIdx = (this._activeIdx + 1) % this.results.length; }\n\n  prev() { this._activeIdx = (this._activeIdx === 0 ? this.results.length - 1 : this._activeIdx - 1); }\n\n  select(item) { this.selectEvent.emit(item); }\n}\n"],"sourceRoot":"/source/"}