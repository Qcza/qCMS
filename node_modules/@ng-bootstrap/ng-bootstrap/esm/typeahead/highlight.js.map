{"version":3,"sources":["typeahead/highlight.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,SAAS,EAAE,KAAK,EAAa,uBAAuB,EAAC,MAAM,eAAe;OAC3E,EAAC,YAAY,EAAE,QAAQ,EAAC,MAAM,cAAc;AAcnD;IAAA;QAGW,mBAAc,GAAG,eAAe,CAAC;IAoB5C,CAAC;IAhBC,WAAW;QACT,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,MAAM,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;QACzC,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QACjD,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI;gBAC7E,MAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/D,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC;gBAC1B,MAAM,CAAC,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;AACH,CAAC;AApBC;IAAC,KAAK,EAAE;;oDAAA;AACR;IAAC,KAAK,EAAE;;4CAAA;AACR;IAAC,KAAK,EAAE;;0CAAA;AAjBV;IAAC,SAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,eAAe,EAAE,uBAAuB,CAAC,MAAM;QAC/C,QAAQ,EAAE,8DAA8D;YACpE,6GAA6G;YAC7G,aAAa;QACjB,MAAM,EAAE,CAAC;;;;GAIR,CAAC;KACH,CAAC;;gBAAA;AAwBD","file":"typeahead/highlight.js","sourcesContent":["import {Component, Input, OnChanges, ChangeDetectionStrategy} from '@angular/core';\nimport {regExpEscape, toString} from '../util/util';\n\n@Component({\n  selector: 'ngb-highlight',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<template ngFor [ngForOf]=\"_parts\" let-part let-isOdd=\"odd\">` +\n      `<span *ngIf=\"isOdd\" class=\"{{highlightClass}}\">{{part}}</span><template [ngIf]=\"!isOdd\">{{part}}</template>` +\n      `</template>`,  // template needs to be formatted in a certain way so we don't add empty text nodes\n  styles: [`\n    .ngb-highlight {\n      font-weight: bold;\n    }\n  `]\n})\nexport class NgbHighlight implements OnChanges {\n  private _parts: string[];\n\n  @Input() highlightClass = 'ngb-highlight';\n  @Input() result: string;\n  @Input() term: string;\n\n  ngOnChanges() {\n    const resultStr = toString(this.result);\n    const resultLC = resultStr.toLowerCase();\n    const termLC = toString(this.term).toLowerCase();\n    let currentIdx = 0;\n\n    if (termLC.length > 0) {\n      this._parts = resultLC.split(new RegExp(`(${regExpEscape(termLC)})`)).map((part) => {\n        const originalPart = resultStr.substr(currentIdx, part.length);\n        currentIdx += part.length;\n        return originalPart;\n      });\n    } else {\n      this._parts = [resultStr];\n    }\n  }\n}\n"],"sourceRoot":"/source/"}