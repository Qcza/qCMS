{"version":3,"sources":["rating/rating.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,SAAS,EAAE,uBAAuB,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAS,MAAM,eAAe;AAErG;;GAEG;AAeH;IAAA;QAEE,UAAK,GAAa,EAAE,CAAC;QAErB;;WAEG;QACM,QAAG,GAAG,EAAE,CAAC;QAOlB;;WAEG;QACM,aAAQ,GAAG,KAAK,CAAC;QAE1B;;;WAGG;QACO,UAAK,GAAG,IAAI,YAAY,EAAU,CAAC;QAE7C;;;WAGG;QACO,UAAK,GAAG,IAAI,YAAY,EAAU,CAAC;QAE7C;;;WAGG;QACO,eAAU,GAAG,IAAI,YAAY,EAAU,CAAC;IAkCpD,CAAC;IAhCC,KAAK,CAAC,KAAa;QACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QACpB,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC5B,CAAC;IAED,MAAM,CAAC,KAAa;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAEO,qBAAqB;QAC3B,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,KAAK,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;QACzB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AA9DC;IAAC,KAAK,EAAE;;sCAAA;AAKR;IAAC,KAAK,EAAE;;uCAAA;AAKR;IAAC,KAAK,EAAE;;2CAAA;AAMR;IAAC,MAAM,EAAE;;wCAAA;AAMT;IAAC,MAAM,EAAE;;wCAAA;AAMT;IAAC,MAAM,EAAE;;6CAAA;AAjDX;IAAC,SAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,eAAe,EAAE,uBAAuB,CAAC,MAAM;QAC/C,QAAQ,EAAE;;;;;;;;;GAST;KACF,CAAC;;aAAA;AAwEF,OAAO,MAAM,qBAAqB,GAAG,CAAC,SAAS,CAAC,CAAC","file":"rating/rating.js","sourcesContent":["import {Component, ChangeDetectionStrategy, Input, Output, EventEmitter, OnInit} from '@angular/core';\n\n/**\n * Rating directive that will take care of visualising a star rating bar.\n */\n@Component({\n  selector: 'ngb-rating',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <span tabindex=\"0\" (mouseleave)=\"reset()\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"rate\">\n      <template ngFor let-r [ngForOf]=\"range\" let-index=\"index\">\n        <span class=\"sr-only\">({{ index < rate ? '*' : ' ' }})</span>\n        <span (mouseenter)=\"enter(index + 1)\" (click)=\"update(index + 1)\" [title]=\"r.title\" \n        [attr.aria-valuetext]=\"r.title\" \n        [style.cursor]=\"readonly ? 'not-allowed' : 'pointer'\">{{ index < rate ? '&#9733;' : '&#9734;' }}</span>\n      </template>\n    </span>\n  `\n})\nexport class NgbRating implements OnInit {\n  private _oldRate: number;\n  range: number[] = [];\n\n  /**\n   * Maximal rating that can be given using this widget.\n   */\n  @Input() max = 10;\n\n  /**\n   * Current rating.\n   */\n  @Input() rate: number;\n\n  /**\n   * A flag indicating if rating can be updated.\n   */\n  @Input() readonly = false;\n\n  /**\n   * An event fired when a user is hovering over a given rating.\n   * Event's payload equals to the rating being hovered over.\n   */\n  @Output() hover = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user stops hovering over a given rating.\n   * Event's payload equals to the rating of the last item being hovered over.\n   */\n  @Output() leave = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user selects a new rating.\n   * Event's payload equals to the newly selected rating.\n   */\n  @Output() rateChange = new EventEmitter<number>();\n\n  enter(value: number): void {\n    if (!this.readonly) {\n      this.rate = value;\n    }\n    this.hover.emit(value);\n  }\n\n  ngOnInit(): void {\n    this._oldRate = this.rate;\n    this.range = this._buildTemplateObjects();\n  }\n\n  reset(): void {\n    this.leave.emit(this.rate);\n    this.rate = this._oldRate;\n  }\n\n  update(value: number): void {\n    if (!this.readonly) {\n      this._oldRate = value;\n      this.rate = value;\n      this.rateChange.emit(value);\n    }\n  }\n\n  private _buildTemplateObjects(): number[] {\n    let range = [];\n    for (let i = 1; i <= this.max; i++) {\n      range.push({title: i});\n    }\n    return range;\n  }\n}\n\nexport const NGB_RATING_DIRECTIVES = [NgbRating];\n"],"sourceRoot":"/source/"}