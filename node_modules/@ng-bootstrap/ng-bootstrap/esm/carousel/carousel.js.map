{"version":3,"sources":["carousel/carousel.ts"],"names":[],"mappings":"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","file":"carousel/carousel.js","sourcesContent":["import {\n  Component,\n  Directive,\n  TemplateRef,\n  ContentChildren,\n  QueryList,\n  Input,\n  OnDestroy,\n  AfterContentChecked,\n  OnInit\n} from '@angular/core';\n\nlet nextId = 0;\n\n/**\n * Represents an individual slide to be used within a carousel.\n */\n@Directive({selector: 'template[ngbSlide]'})\nexport class NgbSlide {\n  /**\n   * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\n   * Will be auto-generated if not provided.\n   */\n  @Input() id = `ngb-slide-${nextId++}`;\n  constructor(public tplRef: TemplateRef<any>) {}\n}\n\n/**\n * Directive to easily create carousels based on Bootstrap's markup.\n */\n@Component({\n  selector: 'ngb-carousel',\n  exportAs: 'ngbCarousel',\n  host: {\n    'class': 'carousel slide',\n    '[style.display]': '\"block\"',\n    'tabIndex': '0',\n    '(mouseenter)': 'pause()',\n    '(mouseleave)': 'cycle()',\n    '(keyup.arrowLeft)': '_keyPrev()',\n    '(keyup.arrowRight)': '_keyNext()'\n  },\n  template: `\n    <ol class=\"carousel-indicators\">\n      <li *ngFor=\"let slide of _slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\" (click)=\"_cycleToSelected(slide.id)\"></li>\n    </ol>\n    <div class=\"carousel-inner\" role=\"listbox\">\n      <div *ngFor=\"let slide of _slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\n        <template [ngTemplateOutlet]=\"slide.tplRef\"></template>\n      </div>\n    </div>\n    <a class=\"left carousel-control\" role=\"button\" (click)=\"_cycleToPrev()\">\n      <span class=\"icon-prev\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Previous</span>\n    </a>\n    <a class=\"right carousel-control\" role=\"button\" (click)=\"_cycleToNext()\">\n      <span class=\"icon-next\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Next</span>\n    </a>\n    `\n})\nexport class NgbCarousel implements AfterContentChecked,\n    OnDestroy, OnInit {\n  @ContentChildren(NgbSlide) private _slides: QueryList<NgbSlide>;\n  private _slideChangeInterval;\n\n  /**\n   *  Amount of time in milliseconds before next slide is shown.\n   */\n  @Input() interval = 5000;\n\n  /**\n   *  Whether can wrap from the last to the first slide.\n   */\n  @Input() wrap = true;\n\n  /**\n   *  A flag for allowing navigation via keyboard\n   */\n  @Input() keyboard = true;\n\n  /**\n   *  The active slide id.\n   */\n  @Input() activeId: string;\n\n  ngAfterContentChecked() {\n    let activeSlide = this._getSlideById(this.activeId);\n    this.activeId = activeSlide ? activeSlide.id : (this._slides.length ? this._slides.first.id : null);\n  }\n\n  ngOnInit() { this._startTimer(); }\n\n  ngOnDestroy() { clearInterval(this._slideChangeInterval); }\n\n  /**\n   * Navigate to a slide with a specified identifier.\n   */\n  select(slideIdx: string) {\n    this._cycleToSelected(slideIdx);\n    this._restartTimer();\n  }\n\n  /**\n   * Navigate to the next slide.\n   */\n  prev() {\n    this._cycleToPrev();\n    this._restartTimer();\n  }\n\n  /**\n   * Navigate to the next slide.\n   */\n  next() {\n    this._cycleToNext();\n    this._restartTimer();\n  }\n\n  /**\n   * Stops the carousel from cycling through items.\n   */\n  pause() { this._stopTimer(); }\n\n  /**\n   * Restarts cycling through the carousel slides from left to right.\n   */\n  cycle() { this._startTimer(); }\n\n  private _keyPrev() {\n    if (this.keyboard) {\n      this.prev();\n    }\n  }\n\n  private _keyNext() {\n    if (this.keyboard) {\n      this.next();\n    }\n  }\n\n  private _cycleToNext() {\n    let selectedId: string = this._getNextSlide(this.activeId);\n    this._cycleToSelected(selectedId);\n  }\n\n  private _cycleToPrev() {\n    let selectedId: string = this._getPrevSlide(this.activeId);\n    this._cycleToSelected(selectedId);\n  }\n\n  private _cycleToSelected(slideIdx: string) {\n    let selectedSlide = this._getSlideById(slideIdx);\n    if (selectedSlide) {\n      this.activeId = selectedSlide.id;\n    }\n  }\n\n  private _restartTimer() {\n    this._stopTimer();\n    this._startTimer();\n  }\n\n  private _startTimer() {\n    this._slideChangeInterval = setInterval(() => { this._cycleToNext(); }, this.interval);\n  }\n\n  private _stopTimer() { clearInterval(this._slideChangeInterval); }\n\n  private _getSlideById(slideIdx: string): NgbSlide {\n    let slideWithId: NgbSlide[] = this._slides.filter(slide => slide.id === slideIdx);\n    return slideWithId.length ? slideWithId[0] : null;\n  }\n\n  private _getNextSlide(id: string): string {\n    let nextSlideId = id;\n    let slideArr = this._slides.toArray();\n\n    slideArr.forEach((slide, idx) => {\n      if (slide.id === id) {\n        let lastSlide: boolean = (idx === (slideArr.length - 1));\n        nextSlideId =\n            lastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) : slideArr[idx + 1].id;\n      }\n    });\n    return nextSlideId;\n  }\n\n  private _getPrevSlide(id: string): string {\n    let prevSlideId = id;\n    let slideArr = this._slides.toArray();\n\n    slideArr.forEach((slide, idx) => {\n      if (slide.id === id) {\n        prevSlideId =\n            idx === 0 ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) : slideArr[idx - 1].id;\n      }\n    });\n    return prevSlideId;\n  }\n}\n\nexport const NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\n"],"sourceRoot":"/source/"}