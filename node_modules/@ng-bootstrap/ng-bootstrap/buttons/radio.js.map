{"version":3,"sources":["buttons/radio.ts"],"names":[],"mappings":"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","file":"buttons/radio.js","sourcesContent":["import {Directive, forwardRef, Optional, Input, Renderer, ElementRef, OnDestroy} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nconst NGB_RADIO_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgbRadioGroup),\n  multi: true\n};\n\n/**\n * Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable\n * specified via ngModel.\n */\n@Directive({\n  selector: '[ngbRadioGroup]',\n  host: {'data-toggle': 'buttons', 'class': 'btn-group'},\n  providers: [NGB_RADIO_VALUE_ACCESSOR]\n})\nexport class NgbRadioGroup implements ControlValueAccessor {\n  private _radios: Set<NgbRadio> = new Set<NgbRadio>();\n  private _value = null;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  onRadioChange(radio: NgbRadio) {\n    this.writeValue(radio.value);\n    this.onChange(radio.value);\n  }\n\n  onRadioValueUpdate() { this._updateRadios(); }\n\n  register(radio: NgbRadio) { this._radios.add(radio); }\n\n  registerOnChange(fn: (value: any) => any): void { this.onChange = fn; }\n\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  unregister(radio: NgbRadio) { this._radios.delete(radio); }\n\n  writeValue(value) {\n    this._value = value;\n    this._updateRadios();\n  }\n\n  private _updateRadios() { this._radios.forEach((radio) => radio.markChecked(this._value)); }\n}\n\n\n@Directive({selector: 'label.btn'})\nexport class NgbActiveLabel {\n  constructor(private _renderer: Renderer, private _elRef: ElementRef) {}\n\n  set active(isActive: boolean) { this._renderer.setElementClass(this._elRef.nativeElement, 'active', isActive); }\n}\n\n\n/**\n * Marks an input of type \"radio\" as part of the NgbRadioGroup.\n */\n@Directive(\n    {selector: 'input[type=radio]', host: {'(change)': 'onChange($event.target.value)', '[checked]': '_checked'}})\nexport class NgbRadio implements OnDestroy {\n  private _value: any = null;\n  private _checked: boolean;\n\n  /**\n   * You can specify model value of a given radio by binding to the value property.\n  */\n  @Input('value')\n  set value(value: any) {\n    this._value = value;\n    const stringValue = value ? value.toString() : '';\n    this._renderer.setElementProperty(this._element.nativeElement, 'value', stringValue);\n\n    if (this._group) {\n      this._group.onRadioValueUpdate();\n    }\n  }\n\n  get value() { return this._value; }\n\n  constructor(\n      @Optional() private _group: NgbRadioGroup, @Optional() private _label: NgbActiveLabel,\n      private _renderer: Renderer, private _element: ElementRef) {\n    if (this._group) {\n      this._group.register(this);\n    }\n  }\n\n  markChecked(value) {\n    this._checked = (this.value === value && value !== null);\n    this._label.active = this._checked;\n  }\n\n  ngOnDestroy() {\n    if (this._group) {\n      this._group.unregister(this);\n    }\n  }\n\n  onChange() {\n    if (this._group) {\n      this._group.onRadioChange(this);\n    }\n  }\n}\n\nexport const NGB_RADIO_DIRECTIVES = [NgbRadio, NgbActiveLabel, NgbRadioGroup];\n"],"sourceRoot":"/source/"}