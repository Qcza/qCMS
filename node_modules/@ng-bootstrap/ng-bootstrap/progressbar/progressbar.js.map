{"version":3,"sources":["progressbar/progressbar.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAwD,eAAe,CAAC,CAAA;AACxE,qBAA8B,cAAc,CAAC,CAAA;AAE7C;;GAEG;AAeH;IAAA;QACE;;WAEG;QACM,QAAG,GAAG,GAAG,CAAC;QAEnB;;;WAGG;QACM,aAAQ,GAAG,KAAK,CAAC;QAE1B;;WAEG;QACM,YAAO,GAAG,KAAK,CAAC;QAOzB;;WAEG;QACM,UAAK,GAAG,CAAC,CAAC;IAKrB,CAAC;IAHC,iCAAQ,GAAR,cAAa,MAAM,CAAC,sBAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAE5D,wCAAe,GAAf,cAAoB,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAzB9D;QAAC,YAAK,EAAE;;+CAAA;IAMR;QAAC,YAAK,EAAE;;oDAAA;IAKR;QAAC,YAAK,EAAE;;mDAAA;IAKR;QAAC,YAAK,EAAE;;gDAAA;IAKR;QAAC,YAAK,EAAE;;iDAAA;IAvCV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,eAAe,EAAE,8BAAuB,CAAC,MAAM;YAC/C,QAAQ,EAAE,gYAST;SACF,CAAC;;sBAAA;IA+BF,qBAAC;AAAD,CA9BA,AA8BC,IAAA;AA9BY,sBAAc,iBA8B1B,CAAA;AAEY,kCAA0B,GAAG,CAAC,cAAc,CAAC,CAAC","file":"progressbar/progressbar.js","sourcesContent":["import {Component, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {getValueInRange} from '../util/util';\n\n/**\n * Directive that can be used to provide feedback on the progress of a workflow or an action.\n */\n@Component({\n  selector: 'ngb-progressbar',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <progress class=\"progress {{type ? 'progress-' + type : ''}}\" \n      [class.progress-animated]=\"animated\" \n      [class.progress-striped]=\"striped\"\n      [max]=\"max\" [value]=\"getValue()\">\n      <div class=\"progress\">\n        <span class=\"progress-bar\" [style.width.%]=\"getPercentValue()\"><ng-content></ng-content></span>\n      </div>\n    </progress>\n  `\n})\nexport class NgbProgressbar {\n  /**\n   * Maximal value to be displayed in the progressbar.\n   */\n  @Input() max = 100;\n\n  /**\n   * A flag indicating if a progress bar should be animated when the value changes. Takes effect only for browsers\n   * supporting CSS3 animations.\n   */\n  @Input() animated = false;\n\n  /**\n   * A flag indicating if a progress bar should be displayed as striped.\n   */\n  @Input() striped = false;\n\n  /**\n   * Type of progress bar, can be one of \"success\", \"info\", \"warning\" or \"danger\".\n   */\n  @Input() type: string;\n\n  /**\n   * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\n   */\n  @Input() value = 0;\n\n  getValue() { return getValueInRange(this.value, this.max); }\n\n  getPercentValue() { return 100 * this.getValue() / this.max; }\n}\n\nexport const NGB_PROGRESSBAR_DIRECTIVES = [NgbProgressbar];\n"],"sourceRoot":"/source/"}