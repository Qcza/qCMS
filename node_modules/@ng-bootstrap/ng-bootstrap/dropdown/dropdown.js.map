{"version":3,"sources":["dropdown/dropdown.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAmE,eAAe,CAAC,CAAA;AAEnF;;GAEG;AAWH;IAAA;QACE;;WAEG;QACM,cAAS,GAAG,IAAI,CAAC;QAE1B;;WAEG;QACoB,UAAK,GAAG,KAAK,CAAC;QAErC;;;WAGG;QACO,eAAU,GAAG,IAAI,mBAAY,EAAE,CAAC;IAwC5C,CAAC;IArCC;;OAEG;IACH,4BAAM,GAAN,cAAW,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAE/B;;OAEG;IACH,0BAAI,GAAJ;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,2BAAK,GAAL;QACE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,4BAAM,GAAN;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC;IACH,CAAC;IAEO,uCAAiB,GAAzB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;IACH,CAAC;IAlDD;QAAC,YAAK,EAAE;;kDAAA;IAKR;QAAC,YAAK,CAAC,MAAM,CAAC;;8CAAA;IAMd;QAAC,aAAM,EAAE;;mDAAA;IAzBX;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,QAAQ,EAAE,aAAa;YACvB,IAAI,EAAE;gBACJ,OAAO,EAAE,UAAU;gBACnB,cAAc,EAAE,OAAO;gBACvB,aAAa,EAAE,qBAAqB;gBACpC,kBAAkB,EAAE,qBAAqB;aAC1C;SACF,CAAC;;mBAAA;IAwDF,kBAAC;AAAD,CAvDA,AAuDC,IAAA;AAvDY,mBAAW,cAuDvB,CAAA;AAED;;GAEG;AAKH;IACE,2BAAoB,SAAsB;QAAtB,cAAS,GAAT,SAAS,CAAa;IAAG,CAAC;IAG9C,sCAAU,GAAV,UAAW,MAAM;QACf,MAAM,CAAC,eAAe,EAAE,CAAC;QACzB,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;IAJD;QAAC,mBAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;;;;uDAAA;IAPpC;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;YAC/B,IAAI,EAAE,EAAC,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,MAAM,EAAE,sBAAsB,EAAE,oBAAoB,EAAC;SAC1G,CAAC;;yBAAA;IASF,wBAAC;AAAD,CARA,AAQC,IAAA;AARY,yBAAiB,oBAQ7B,CAAA;AAEY,+BAAuB,GAAG,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC","file":"dropdown/dropdown.js","sourcesContent":["import {Directive, Input, Output, HostListener, EventEmitter} from '@angular/core';\n\n/**\n * Transforms a node into a dropdown.\n */\n@Directive({\n  selector: '[ngbDropdown]',\n  exportAs: 'ngbDropdown',\n  host: {\n    'class': 'dropdown',\n    '[class.open]': '_open',\n    '(keyup.esc)': '_closeFromOutside()',\n    '(document:click)': '_closeFromOutside()'\n  }\n})\nexport class NgbDropdown {\n  /**\n   * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n   */\n  @Input() autoClose = true;\n\n  /**\n   *  Defines whether or not the dropdown-menu is open initially.\n   */\n  @Input('open') private _open = false;\n\n  /**\n   *  An event fired when the dropdown is opened or closed.\n   *  Event's payload equals whether dropdown is open.\n   */\n  @Output() openChange = new EventEmitter();\n\n\n  /**\n   * Checks if the dropdown menu is open or not.\n   */\n  isOpen() { return this._open; }\n\n  /**\n   * Opens the dropdown menu of a given navbar or tabbed navigation.\n   */\n  open() {\n    this._open = true;\n    this.openChange.emit(true);\n  }\n\n  /**\n   * Closes the dropdown menu of a given navbar or tabbed navigation.\n   */\n  close() {\n    this._open = false;\n    this.openChange.emit(false);\n  }\n\n  /**\n   * Toggles the dropdown menu of a given navbar or tabbed navigation.\n   */\n  toggle() {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  private _closeFromOutside() {\n    if (this.autoClose) {\n      this.close();\n    }\n  }\n}\n\n/**\n * Allows the dropdown to be toggled via click. This directive is optional.\n */\n@Directive({\n  selector: '[ngbDropdownToggle]',\n  host: {'class': 'dropdown-toggle', 'aria-haspopup': 'true', '[attr.aria-expanded]': '_dropdown.isOpen()'}\n})\nexport class NgbDropdownToggle {\n  constructor(private _dropdown: NgbDropdown) {}\n\n  @HostListener('click', ['$event'])\n  toggleOpen($event) {\n    $event.stopPropagation();\n    this._dropdown.toggle();\n  }\n}\n\nexport const NGB_DROPDOWN_DIRECTIVES = [NgbDropdownToggle, NgbDropdown];\n"],"sourceRoot":"/source/"}