{"version":3,"sources":["util/popup.ts"],"names":[],"mappings":";AAAA,qBAQO,eAAe,CAAC,CAAA;AAEvB;IAIE,sBACI,IAAS,EAAU,SAAmB,EAAU,iBAAmC,EAAU,SAAmB,EAChH,wBAAkD;QAD/B,cAAS,GAAT,SAAS,CAAU;QAAU,sBAAiB,GAAjB,iBAAiB,CAAkB;QAAU,cAAS,GAAT,SAAS,CAAU;QAElH,IAAI,CAAC,cAAc,GAAG,wBAAwB,CAAC,uBAAuB,CAAI,IAAI,CAAC,CAAC;IAClF,CAAC;IAED,2BAAI,GAAJ,UAAK,OAAmC;QACtC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC1G,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,4BAAK,GAAL;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC;IACH,CAAC;IAEO,uCAAgB,GAAxB,UAAyB,OAAkC;QACzD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,kBAAW,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAiB,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC;QACxF,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,KAAG,OAAS,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IACH,mBAAC;AAAD,CAnCA,AAmCC,IAAA;AAnCY,oBAAY,eAmCxB,CAAA","file":"util/popup.js","sourcesContent":["import {\n  Injector,\n  TemplateRef,\n  ViewContainerRef,\n  Renderer,\n  ComponentRef,\n  ComponentFactory,\n  ComponentFactoryResolver\n} from '@angular/core';\n\nexport class PopupService<T> {\n  private _windowFactory: ComponentFactory<T>;\n  private _windowRef: ComponentRef<T>;\n\n  constructor(\n      type: any, private _injector: Injector, private _viewContainerRef: ViewContainerRef, private _renderer: Renderer,\n      componentFactoryResolver: ComponentFactoryResolver) {\n    this._windowFactory = componentFactoryResolver.resolveComponentFactory<T>(type);\n  }\n\n  open(content?: string | TemplateRef<any>): ComponentRef<T> {\n    if (!this._windowRef) {\n      const nodes = this._getContentNodes(content);\n      this._windowRef = this._viewContainerRef.createComponent(this._windowFactory, 0, this._injector, nodes);\n    }\n\n    return this._windowRef;\n  }\n\n  close() {\n    if (this._windowRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\n      this._windowRef = null;\n    }\n  }\n\n  private _getContentNodes(content: string | TemplateRef<any>) {\n    if (!content) {\n      return [];\n    } else if (content instanceof TemplateRef) {\n      return [this._viewContainerRef.createEmbeddedView(<TemplateRef<T>>content).rootNodes];\n    } else {\n      return [[this._renderer.createText(null, `${content}`)]];\n    }\n  }\n}\n"],"sourceRoot":"/source/"}