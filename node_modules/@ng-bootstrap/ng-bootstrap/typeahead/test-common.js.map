{"version":3,"sources":["typeahead/test-common.ts"],"names":[],"mappings":";AACA,iCAAiB,2BAA2B,CAAC,CAAA;AAE7C,uBAAuB,GAAW;IAChC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACzC,CAAC;AAED,wBAA+B,OAAqB;IAClD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,qBAAE,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC;AAFe,sBAAc,iBAE7B,CAAA;AAED,uBAA8B,QAAqB,EAAE,UAAoB;IACvE,IAAM,KAAK,GAAG,QAAQ,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;IAEhE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAEhD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3C,IAAI,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEzC,EAAE,CAAC,CAAC,cAAc,KAAK,GAAG,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC1C,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC9C,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;AACH,CAAC;AAjBe,qBAAa,gBAiB5B,CAAA","file":"typeahead/test-common.js","sourcesContent":["import {DebugElement} from '@angular/core';\nimport {By} from '@angular/platform-browser';\n\nfunction normalizeText(txt: string): string {\n  return txt.trim().replace(/\\s+/g, ' ');\n}\n\nexport function getWindowLinks(element: DebugElement): DebugElement[] {\n  return Array.from(element.queryAll(By.css('button.dropdown-item')));\n}\n\nexport function expectResults(nativeEl: HTMLElement, resultsDef: string[]): void {\n  const pages = nativeEl.querySelectorAll('button.dropdown-item');\n\n  expect(pages.length).toEqual(resultsDef.length);\n\n  for (let i = 0; i < resultsDef.length; i++) {\n    let resultDef = resultsDef[i];\n    let classIndicator = resultDef.charAt(0);\n\n    if (classIndicator === '+') {\n      expect(pages[i]).toHaveCssClass('active');\n      expect(normalizeText(pages[i].textContent)).toEqual(resultDef.substr(1));\n    } else {\n      expect(pages[i]).not.toHaveCssClass('active');\n      expect(normalizeText(pages[i].textContent)).toEqual(resultDef);\n    }\n  }\n}\n"],"sourceRoot":"/source/"}