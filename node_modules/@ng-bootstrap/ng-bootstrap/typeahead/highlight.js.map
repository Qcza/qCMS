{"version":3,"sources":["typeahead/highlight.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAmE,eAAe,CAAC,CAAA;AACnF,qBAAqC,cAAc,CAAC,CAAA;AAcpD;IAAA;QAGW,mBAAc,GAAG,eAAe,CAAC;IAoB5C,CAAC;IAhBC,kCAAW,GAAX;QACE,IAAM,SAAS,GAAG,eAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,IAAM,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;QACzC,IAAM,MAAM,GAAG,eAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QACjD,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,MAAI,mBAAY,CAAC,MAAM,CAAC,MAAG,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI;gBAC7E,IAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/D,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC;gBAC1B,MAAM,CAAC,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAnBD;QAAC,YAAK,EAAE;;wDAAA;IACR;QAAC,YAAK,EAAE;;gDAAA;IACR;QAAC,YAAK,EAAE;;8CAAA;IAjBV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,eAAe,EAAE,8BAAuB,CAAC,MAAM;YAC/C,QAAQ,EAAE,kEAA8D;gBACpE,mHAA6G;gBAC7G,aAAa;YACjB,MAAM,EAAE,CAAC,6DAIR,CAAC;SACH,CAAC;;oBAAA;IAwBF,mBAAC;AAAD,CAvBA,AAuBC,IAAA;AAvBY,oBAAY,eAuBxB,CAAA","file":"typeahead/highlight.js","sourcesContent":["import {Component, Input, OnChanges, ChangeDetectionStrategy} from '@angular/core';\nimport {regExpEscape, toString} from '../util/util';\n\n@Component({\n  selector: 'ngb-highlight',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<template ngFor [ngForOf]=\"_parts\" let-part let-isOdd=\"odd\">` +\n      `<span *ngIf=\"isOdd\" class=\"{{highlightClass}}\">{{part}}</span><template [ngIf]=\"!isOdd\">{{part}}</template>` +\n      `</template>`,  // template needs to be formatted in a certain way so we don't add empty text nodes\n  styles: [`\n    .ngb-highlight {\n      font-weight: bold;\n    }\n  `]\n})\nexport class NgbHighlight implements OnChanges {\n  private _parts: string[];\n\n  @Input() highlightClass = 'ngb-highlight';\n  @Input() result: string;\n  @Input() term: string;\n\n  ngOnChanges() {\n    const resultStr = toString(this.result);\n    const resultLC = resultStr.toLowerCase();\n    const termLC = toString(this.term).toLowerCase();\n    let currentIdx = 0;\n\n    if (termLC.length > 0) {\n      this._parts = resultLC.split(new RegExp(`(${regExpEscape(termLC)})`)).map((part) => {\n        const originalPart = resultStr.substr(currentIdx, part.length);\n        currentIdx += part.length;\n        return originalPart;\n      });\n    } else {\n      this._parts = [resultStr];\n    }\n  }\n}\n"],"sourceRoot":"/source/"}