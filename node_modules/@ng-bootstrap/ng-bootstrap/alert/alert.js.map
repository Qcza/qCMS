{"version":3,"sources":["alert/alert.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAeO,eAAe,CAAC,CAAA;AAEvB,sBAA2B,eAAe,CAAC,CAAA;AAE3C;;GAEG;AAaH;IAAA;QACE;;;WAGG;QACM,gBAAW,GAAG,IAAI,CAAC;QAC5B;;WAEG;QACM,SAAI,GAAG,SAAS,CAAC;QAC1B;;WAEG;QACO,UAAK,GAAG,IAAI,mBAAY,EAAE,CAAC;IAGvC,CAAC;IADC,+BAAY,GAAZ,cAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAVzC;QAAC,YAAK,EAAE;;iDAAA;IAIR;QAAC,YAAK,EAAE;;0CAAA;IAIR;QAAC,aAAM,EAAE;;2CAAA;IAzBX;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,eAAe,EAAE,8BAAuB,CAAC,MAAM;YAC/C,QAAQ,EAAE,+SAOP;SACJ,CAAC;;gBAAA;IAiBF,eAAC;AAAD,CAhBA,AAgBC,IAAA;AAhBY,gBAAQ,WAgBpB,CAAA;AAED;;GAEG;AAEH;IAkBE,6BACY,YAAiC,EAAE,gBAAkC,EAAE,QAAkB,EACjG,wBAAkD,EAAE,QAAkB;QAD9D,iBAAY,GAAZ,YAAY,CAAqB;QAd7C;;WAEG;QACM,SAAI,GAAG,SAAS,CAAC;QAC1B;;WAEG;QACc,eAAU,GAAG,IAAI,mBAAY,EAAE,CAAC;QAS/C,IAAI,CAAC,aAAa;YACd,IAAI,oBAAY,CAAW,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,wBAAwB,CAAC,CAAC;IAC3G,CAAC;IAED,mCAAK,GAAL,cAAgB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAE7C,sCAAQ,GAAR;QAAA,iBAUC;QATC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7D,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,UAAC,MAAM;YAC9C,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7B,KAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,cAAQ,KAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC7E,CAAC;IACH,CAAC;IAED,yCAAW,GAAX,cAAgB,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IA/B9C;QAAC,YAAK,EAAE;;qDAAA;IAIR;QAAC,aAAM,CAAC,OAAO,CAAC;;2DAAA;IAIhB;QAAC,YAAK,EAAE;;iEAAA;IAjBV;QAAC,gBAAS,CAAC,EAAC,QAAQ,EAAE,oBAAoB,EAAC,CAAC;;2BAAA;IAyC5C,0BAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,2BAAmB,sBAwC/B,CAAA;AAEY,4BAAoB,GAAG,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC","file":"alert/alert.js","sourcesContent":["import {\n  Component,\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ChangeDetectionStrategy,\n  ViewContainerRef,\n  Injector,\n  OnDestroy,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Renderer,\n  TemplateRef\n} from '@angular/core';\n\nimport {PopupService} from '../util/popup';\n\n/**\n * Alerts can be used to provide feedback messages.\n */\n@Component({\n  selector: 'ngb-alert',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div [class]=\"'alert alert-' + type\" role=\"alert\">\n      <button *ngIf=\"dismissible\" type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"closeHandler()\">\n            <span aria-hidden=\"true\">&times;</span>\n      </button>\n      <ng-content></ng-content>\n    </div>\n    `\n})\nexport class NgbAlert {\n  /**\n   * A flag indicating if a given alert can be dismissed (closed) by a user. If this flag is set, a close button (in a\n   * form of a cross) will be displayed.\n   */\n  @Input() dismissible = true;\n  /**\n   * Alert type (CSS class). Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n   */\n  @Input() type = 'warning';\n  /**\n   * An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts.\n   */\n  @Output() close = new EventEmitter();\n\n  closeHandler() { this.close.emit(null); }\n}\n\n/**\n * Alerts that can be dismissed without any additional code.\n */\n@Directive({selector: 'template[ngbAlert]'})\nexport class NgbDismissibleAlert implements OnInit, OnDestroy {\n  private _popupService: PopupService<NgbAlert>;\n  private _windowRef: ComponentRef<NgbAlert>;\n  private _timeout;\n\n  /**\n   * Alert type (CSS class). Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n   */\n  @Input() type = 'warning';\n  /**\n   * An event emitted when the close button is clicked.\n   */\n  @Output('close') closeEvent = new EventEmitter();\n  /**\n   *  Time, in milliseconds, before the alert auto closes.\n   */\n  @Input() dismissOnTimeout: number;\n\n  constructor(\n      private _templateRef: TemplateRef<Object>, viewContainerRef: ViewContainerRef, injector: Injector,\n      componentFactoryResolver: ComponentFactoryResolver, renderer: Renderer) {\n    this._popupService =\n        new PopupService<NgbAlert>(NgbAlert, injector, viewContainerRef, renderer, componentFactoryResolver);\n  }\n\n  close(): void { this._popupService.close(); }\n\n  ngOnInit() {\n    this._windowRef = this._popupService.open(this._templateRef);\n    this._windowRef.instance.type = this.type;\n    this._windowRef.instance.close.subscribe(($event) => {\n      this.closeEvent.emit($event);\n      this.close();\n    });\n    if (this.dismissOnTimeout) {\n      this._timeout = setTimeout(() => { this.close(); }, this.dismissOnTimeout);\n    }\n  }\n\n  ngOnDestroy() { clearTimeout(this._timeout); }\n}\n\nexport const NGB_ALERT_DIRECTIVES = [NgbAlert, NgbDismissibleAlert];\n"],"sourceRoot":"/source/"}